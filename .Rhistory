x
x <- c(1,2,3,4)
y <- c(5,6,7,8)
rm(x,y) #remove the variables that we don't want
rm(list = ls()) #remove all the variables
ls()
x <- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE) # byrow' default is False
x
y <- matrix(1:4, nrow = 2, ncol = 2)
y
#generate a vector with 50 elements in normal distribution
x <- rnorm(50)
x
z <- matrix(1:6, nrow = 2, ncol = 3)
zk
x <- c(1,2,3,4)
y <- c(5,6,7,8)
rm(x,y) #remove the variables that we don't want
rm(list = ls()) #remove all the variables
ls()
x <- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE) # byrow' default is False
x
y <- matrix(1:4, nrow = 2, ncol = 2)
y
#generate a vector with 50 elements in normal distribution
x <- rnorm(50)
x
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z(-c(1,3), )
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z(-c(1,3), )
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z(-c(1,3), )
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,2),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3),]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3), -c(1,3)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3), -c(1,3)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3), -c(1,3)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3), -c(1,3)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3), -c(1,3)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3), -c(1,3)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,3), -c(1,3)]
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z <- z[-c(1,3), -c(1,3)]
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z <- z[-c(1,3), -c(1,3)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z <- z[-c(1,2), -c(1,3)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z <- z[-c(1,2), -c(1,2)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z <- z[-c(1,2), -c(1)]
z
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,2), -c(1)]
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1,2), -c(1)]
z <- matrix(1:6, nrow = 2, ncol = 3)
z
z[-c(1), -c(1)]
Auto <- read.table("Auto.data")
unlink("Desktop/DAVIS/STA 141B/Homework 1/HW1_cache", recursive = TRUE)
knit_with_parameters("~/Desktop/DAVIS/STA 141B/Homework 1/HW1.Rmd")
library(readr)
library(ggplot2)
library(tidyr)
# .wea file
preview_lines <- readLines("USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021/USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021.wea", n = 100)
library(readr)
library(ggplot2)
library(tidyr)
# .wea file
preview_lines <- readLines("USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021/USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021.wea", n = 100)
setwd("~/Desktop/DAVIS/STA 141B/Homework 1")
library(readr)
library(ggplot2)
library(tidyr)
# .wea file
preview_lines <- readLines("USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021/USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021.wea", n = 100)
#cat(preview_lines, sep = "\n")
wea_data <- read.table("USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021/USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021.wea", skip = 6, sep = " ", header = FALSE)
colnames(wea_data) <- c("Month", "Day", "Hour", "Global_Horizontal_Irradiance", "Direct_Normal_Irradiance")
head(wea_data)
#.pvsyst file
getwd()
pvsline <- readLines("USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021/USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021.pvsyst", n = 50)
pvsdata <- read.table("USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021/USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021.pvsyst", skip = 14, sep = ",", col.names = c("Year", "Month", "Day", "Hour", "Minute", "GHI", "DHI", "DNI", "Tamb", "WindVel", "WindDir"))
head(pvsdata)
sf_statlines <- read_lines("USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021/USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021.stat", locale = locale(encoding = "ISO-8859-1"))
# Function
# Transpose a datafram
transpose_dataframe <- function(data) {
row_names <- data$X
data$X <- NULL
transposed_data <- t(data)
transposed_data <- as.data.frame(transposed_data)
colnames(transposed_data) <- row_names
rownames(transposed_data) <- colnames(data)
return(transposed_data)
}
# Convert the column Day:Hour into time variables
my_convert_to_time <- function(tdata){
dayhour_col_vector <- grep("Day:Hour", names(tdata))
if(length(dayhour_col_vector) == 0){
warning("Day:Hour not found")
return(tdata)
}
for (i in dayhour_col_vector) {
for (j in 1:nrow(tdata)) {
tdata[j,i]<-paste0("2023-", j,"-",substr(tdata[j,i],1,2), " ", substr(tdata[j,i],4,5), ":00:00")
#print(as.POSIXct(tdata[j,i], format="%Y-%m-%d %H:%M:%S"))
}
}
tdata[,dayhour_col_vector] <- lapply(tdata[,dayhour_col_vector], as.POSIXct, format="%Y-%m-%d %H:%M:%S")
return(tdata)
}
# Read the char vactor as df
read_stat <- function(title, statlines){
starts = grep(title, statlines)
# grepl gives a boolean vector showing the seaching result, and we negate that result to
# subset the sf_statlines
ends = grep(" - ", statlines[(starts[1]+1) : length(statlines)], fixed = TRUE)
temp <- statlines[(starts[1]+1) : (starts[1]+ends[1]-1)]
temp <- temp[temp != ""]
# use gsub with regular expression to rule out NAs in the first and last column
# ^ means at the beginning, + means that the pattern might appear one or more times,
# $ means is the end indicator, \\s and \\t represents space and tab respectively
# gsub traverse the element in char vector, and see if the beggining and the end of an
# element   is matching to the regular expression
temp <- gsub("^(\\s\\t)+|(\\t)+$", "", temp)
data <- read.table(text = temp, sep = '\t', header = TRUE)
return(data)
}
# convert only char elements into numeric(double) for a df
df_to_numeric <- function(data){
char_cols <- sapply(data, is.character)
data[char_cols] <- lapply(data[char_cols], as.numeric)
return(data)
}
# for hourly df: convert the first column to the row's name
first_row_to_colnames <- function(data){
rownames(data) <- data$X
data <- data[, -1]
return(data)
}
# Turn hourly data into more a tidy data with 3 cols
hourly_3_cols <- function(data){
data <- head(data, nrow(data) - 2) # remove max and min
col_names <- colnames(data)
row_names <- rownames(data)
vec <- unlist(data)
new_df <- data.frame(col = vec)
# new_df <- cbind(new_df,row_names)
new_df <- cbind(new_df,c(0:23))
col_names <- rep(c(1:12), each = 12)
new_df <- cbind(new_df,col_names)
rownames(new_df) <- NULL
return(new_df)
}
plot_hourly_df <- function(combined_df){
var_names <- c("Dry Bulb temperatures", "Dew Point temperatures",
"Relative Humidity", "Direct Normal Solar Radiation",
"Wind Speed")
# Create heat maps along each calname with repect to month and hour
for (name in var_names) {
p <- ggplot(combined_df,
aes(x = Hour, y = Month, fill = combined_df[,name])) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(x = "Hour", y = "Month", fill = name) +
ggtitle(name)
print(p)
}
}
sf_statlines <- read_lines("USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021/USA_CA_Fairfield-San.Francisco.Bay.Reserve.998011_TMYx.2007-2021.stat", locale = locale(encoding = "ISO-8859-1"))
data <- read_stat("Monthly Statistics for Dry Bulb temperatures",sf_statlines)
tdata <- transpose_dataframe(data)
tdata <- my_convert_to_time(tdata)
tdata <- df_to_numeric(tdata)
head(tdata)
#starts = grep("Monthly Statistics for Dry Bulb temperatures", sf_statlines)
# grepl gives a boolean vector showing the seaching result, and we negate that result to
# subset the sf_statlines
#ends = grep(" - ", sf_statlines[(starts[1]+1) : length(sf_statlines)], fixed = TRUE)
#temp <- sf_statlines[(starts[1]+1) : (starts[1]+ends[1]-1)]
#temp <- temp[temp != ""]
# use gsub with regular expression to rule out NAs in the first and last column
# ^ means at the beginning, + means that the pattern might appear one or more times,
# $ means is the end indicator, \\s and \\t represents space and tab respectively
# gsub traverse the element in char vector, and see if the beggining and the end of a element is matching to the regular expression
#temp <- gsub("^(\\s\\t)+|(\\t)+$", "", temp)
#data <- read.table(text = temp, sep = '\t', header = TRUE)
print(tdata[which(tdata$`Maximum ` == max(tdata$`Maximum `))[1],])
print(tdata[which(tdata$`Minimum ` == min(tdata$`Minimum `))[1],])
data <- read_stat("Monthly Statistics for Dew Point temperatures",sf_statlines)
tdata <- transpose_dataframe(data)
tdata <- my_convert_to_time(tdata)
tdata <- df_to_numeric(tdata)
head(tdata)
print(tdata[which(tdata$`Maximum ` == max(tdata$`Maximum `))[1],])
print(tdata[which(tdata$`Minimum ` == min(tdata$`Minimum `))[1],])
data <- read_stat("Average Hourly Statistics for Dry Bulb temperatures",sf_statlines)
data <- first_row_to_colnames(data)
data <- hourly_3_cols(data)
head(data)
#dayhour_col_vector <- grep("Day:Hour", names(data))
#dayhour_col_vector
data <- read_stat("Average Hourly Statistics for Dew Point temperatures",sf_statlines)
data <- first_row_to_colnames(data)
data <- hourly_3_cols(data)
head(data)
data <- read_stat("Average Hourly Relative Humidity",sf_statlines)
data
data <- read_stat("Monthly Wind Direction",sf_statlines)
tdata <- transpose_dataframe(data)
tdata <- df_to_numeric(tdata)
tdata
#Max Hour is 13, which indicates that the highest average solar radiation occurs between 13:01 and 14:00 (1:01 PM and 2:00 PM) in that month.
data <- read_stat("Average Hourly Statistics for Direct Normal Solar Radiation",sf_statlines)
data
data <- read_stat("Monthly Statistics for Wind Speed",sf_statlines)
tdata <- transpose_dataframe(data)
tdata <- my_convert_to_time(tdata)
tdata <- df_to_numeric(tdata)
tdata
print(tdata[which(tdata$`Maximum ` == max(tdata$`Maximum `))[1],])
print(tdata[which(tdata$`Minimum ` == min(tdata$`Minimum `))[1],])
data <- read_stat("Average Hourly Statistics for Wind Speed",sf_statlines)
data
data1 <- read_stat("Average Hourly Statistics for Dry Bulb temperatures",sf_statlines)
data1 <- first_row_to_colnames(data1)
data1 <- hourly_3_cols(data1)
head(data1)
data2 <- read_stat("Average Hourly Statistics for Dew Point temperatures",sf_statlines)
data2 <- first_row_to_colnames(data2)
data2 <- hourly_3_cols(data2)
head(data2)
data3 <- read_stat("Average Hourly Relative Humidity",sf_statlines)
data3 <- first_row_to_colnames(data3)
data3 <- hourly_3_cols(data3)
head(data3)
data4 <- read_stat("Average Hourly Statistics for Direct Normal Solar Radiation",sf_statlines)
data4 <- first_row_to_colnames(data4)
data4 <- hourly_3_cols(data4)
head(data4)
data5 <- read_stat("Average Hourly Statistics for Wind Speed",sf_statlines)
data5 <- first_row_to_colnames(data5)
data5 <- hourly_3_cols(data5)
head(data5)
time_df <- data1[,2:3]
combined_df <- cbind(time_df, data1[, 1],data2[, 1],data3[, 1],data4[, 1],data5[, 1])
colnames(combined_df) <- c("Hour", "Month" ,"Dry Bulb temperatures", "Dew Point temperatures", "Relative Humidity", "Direct Normal Solar Radiation", "Wind Speed")
combined_df <- df_to_numeric(combined_df)
head(combined_df)
plot_hourly_df(combined_df)
my_text <- c("apple", "banana", "cherry", "date")
# Open a text connection using the my_text vector
my_connection <- textConnection(my_text, "r")
# Read the first line of the text connection
first_line <- readLines(my_connection, n = 1)
# Print the first line
print(first_line)
# Close the text connection
close(my_connection)
my_text <- c("apple", "banana", "cherry", "date")
# Open a text connection using the my_text vector
my_connection <- textConnection(my_text, "r")
my_connection
# Read the first line of the text connection
first_line <- readLines(my_connection, n = 1)
# Print the first line
print(first_line)
# Close the text connection
close(my_connection)
my_text <- c("apple", "banana", "cherry", "date")
# Open a text connection using the my_text vector
my_connection <- textConnection(my_text, "r")
my_connection
# Read the first line of the text connection
first_line <- readLines(my_connection, n = 1)
# Print the first line
print(first_line)
# Close the text connection
close(my_connection)
my_text <- c("apple", "banana", "cherry", "date")
# Open a text connection using the my_text vector
my_connection <- textConnection(my_text, "r")
print(my_connection)
# Read the first line of the text connection
first_line <- readLines(my_connection, n = 1)
# Print the first line
print(first_line)
# Close the text connection
close(my_connection)
my_text <- c("apple", "banana", "cherry", "date")
# Open a text connection using the my_text vector
my_connection <- textConnection(my_text, "r")
my_connection[1]
# Read the first line of the text connection
first_line <- readLines(my_connection, n = 1)
# Print the first line
print(first_line)
# Close the text connection
close(my_connection)
my_text <- c("apple", "banana", "cherry", "date")
# Open a text connection using the my_text vector
my_connection <- textConnection(my_text, "r")
my_connection
# Read the first line of the text connection
first_line <- readLines(my_connection, n = 1)
# Print the first line
print(first_line)
# Close the text connection
close(my_connection)
1 - pbinom(9, 30, 0.5)
1 - pbinom(21, 30, 0.25)
1 - pbinom(21, 30, 0.75)
# Load the data
waiting_times <- c(2.77, 2.32, 4.97, 0.51, 4.22, 4.35, 7.31, 3.33, 4.92, 1.53, 5.62, 7.94, 2.52, 3.59, 6.86, 6.02, 1.84,
3.22, 3.24, 6.21, 4.82, 6.4, 4.85, 6.74, 3.78, 1.54, 6.93, 7.94, 4.94, 2.5)
n_successes <- sum(waiting_times > 3)
n_successes
# Calculate the p-value using the binomial distribution
p_value <- 1 - pbinom(n_successes - 1, size = 30, prob = 0.25)
p_value
# Conduct the binomial test
binom.test(sum(waiting_times <= 3), length(waiting_times), p = 0.5, alternative = "less", conf.level = 0.95)
# Load the data
waiting_times <- c(2.77, 2.32, 4.97, 0.51, 4.22, 4.35, 7.31, 3.33, 4.92, 1.53, 5.62, 7.94, 2.52, 3.59, 6.86, 6.02, 1.84,
3.22, 3.24, 6.21, 4.82, 6.4, 4.85, 6.74, 3.78, 1.54, 6.93, 7.94, 4.94, 2.5)
n_successes <- sum(waiting_times > 3)
n_successes
# Calculate the p-value using the binomial distribution
p_value <- 1 - pbinom(n_successes - 1, size = 30, prob = 0.25)
p_value
# Conduct the binomial test
binom.test(sum(waiting_times <= 3), length(waiting_times), p = 0.25, alternative = "less", conf.level = 0.95)
# Load the data
waiting_times <- c(2.77, 2.32, 4.97, 0.51, 4.22, 4.35, 7.31, 3.33, 4.92, 1.53, 5.62, 7.94, 2.52, 3.59, 6.86, 6.02, 1.84,
3.22, 3.24, 6.21, 4.82, 6.4, 4.85, 6.74, 3.78, 1.54, 6.93, 7.94, 4.94, 2.5)
n_successes <- sum(waiting_times > 3)
n_successes
# Calculate the p-value using the binomial distribution
p_value <- 1 - pbinom(n_successes - 1, size = 30, prob = 0.25)
p_value
# Conduct the binomial test
binom.test(sum(waiting_times <= 3), length(waiting_times), p = 0.25, alternative = "greater", conf.level = 0.95)
# Load the data
waiting_times <- c(2.77, 2.32, 4.97, 0.51, 4.22, 4.35, 7.31, 3.33, 4.92, 1.53, 5.62, 7.94, 2.52, 3.59, 6.86, 6.02, 1.84,
3.22, 3.24, 6.21, 4.82, 6.4, 4.85, 6.74, 3.78, 1.54, 6.93, 7.94, 4.94, 2.5)
n_successes <- sum(waiting_times > 3)
n_successes
# Calculate the p-value using the binomial distribution
p_value <- 1 - pbinom(n_successes - 1, size = 30, prob = 0.25)
p_value
# Conduct the binomial test
binom.test(sum(waiting_times <= 3), length(waiting_times), p = 0.25, alternative = "greater", conf.level = 0.95)
# Load the data
waiting_times <- c(2.77, 2.32, 4.97, 0.51, 4.22, 4.35, 7.31, 3.33, 4.92, 1.53, 5.62, 7.94, 2.52, 3.59, 6.86, 6.02, 1.84,
3.22, 3.24, 6.21, 4.82, 6.4, 4.85, 6.74, 3.78, 1.54, 6.93, 7.94, 4.94, 2.5)
n_successes <- sum(waiting_times > 3)
n_successes
# Calculate the p-value using the binomial distribution
p_value <- 1 - pbinom(n_successes - 1, size = 30, prob = 0.25)
p_value
# Conduct the binomial test
binom.test(sum(waiting_times <= 3), length(waiting_times), p = 0.25, alternative = "less", conf.level = 0.95)
# Load the data
waiting_times <- c(2.77, 2.32, 4.97, 0.51, 4.22, 4.35, 7.31, 3.33, 4.92, 1.53, 5.62, 7.94, 2.52, 3.59, 6.86, 6.02, 1.84,
3.22, 3.24, 6.21, 4.82, 6.4, 4.85, 6.74, 3.78, 1.54, 6.93, 7.94, 4.94, 2.5)
n_successes <- sum(waiting_times > 3)
n_successes
# Calculate the p-value using the binomial distribution
p_value <- 1 - pbinom(n_successes - 1, size = 30, prob = 0.25)
p_value
# Conduct the binomial test
binom.test(sum(waiting_times <= 3), length(waiting_times), p = 0.25, alternative = "less", conf.level = 0.95)
# Load the data
waiting_times <- c(2.77, 2.32, 4.97, 0.51, 4.22, 4.35, 7.31, 3.33, 4.92, 1.53, 5.62, 7.94, 2.52, 3.59, 6.86, 6.02, 1.84,
3.22, 3.24, 6.21, 4.82, 6.4, 4.85, 6.74, 3.78, 1.54, 6.93, 7.94, 4.94, 2.5)
n_successes <- sum(waiting_times > 3)
n_successes
# Calculate the p-value using the binomial distribution
p_value <- 1 - pbinom(n_successes - 1, size = 30, prob = 0.25)
p_value
# Conduct the binomial test
binom.test(sum(waiting_times <= 3), length(waiting_times), p = 0.75, alternative = "less", conf.level = 0.95)
# Load the data
waiting_times <- c(2.77, 2.32, 4.97, 0.51, 4.22, 4.35, 7.31, 3.33, 4.92, 1.53, 5.62, 7.94, 2.52, 3.59, 6.86, 6.02, 1.84,
3.22, 3.24, 6.21, 4.82, 6.4, 4.85, 6.74, 3.78, 1.54, 6.93, 7.94, 4.94, 2.5)
n_successes <- sum(waiting_times > 3)
n_successes
# Calculate the p-value using the binomial distribution
p_value <- 1 - pbinom(n_successes - 1, size = 30, prob = 0.25)
p_value
# Conduct the binomial test
binom.test(sum(waiting_times <= 3), length(waiting_times), p = 0.25, alternative = "less", conf.level = 0.95)
pbinom(4, 9, 0.5) - pbinom(1, 9, 0.5)
pbinom(4, 9, 0.5)
matrix(rnorm(12), nrow=3, ncol=4)
A = matrix(rnorm(12), nrow=3, ncol=4)
A = matrix(rnorm(12), nrow=3, ncol=4)
A
A = matrix(rnorm(12), nrow=3, ncol=4)
A = round(A)
A = matrix(rnorm(12), nrow=3, ncol=4)
A = round(A)
A
A = matrix(rnorm(12), nrow=3, ncol=4)
A = round(A)
A
rref(A)
?rref
??rref
install.packages("pracma")
library(pracma)
A = matrix(rnorm(12), nrow=3, ncol=4)
A = round(A)
A
rref(A)
library(pracma)
A = matrix(rnorm(12), nrow=3, ncol=4)
A = round(A)
A
rank(rref(A))
library(pracma)
A = matrix(rnorm(12), nrow=3, ncol=4)
A = round(A)
rank(A)
library(pracma)
A = matrix(rnorm(12), nrow=3, ncol=4)
A = round(A)
rowrank(A)
A <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3)
A
# compute the QR decomposition of the matrix
QR <- qr(A)
# extract the rank of the matrix from the QR decomposition
rank_A <- QR$rank
# print the rank of the matrix
print(rank_A)
